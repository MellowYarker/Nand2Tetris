// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    /*   If leftmost bit is 0, we want to use the RAM, so use the next 14 bits to access RAM.
         Otherwise, we want to check our memory-mapped I/O, so use 
              - the 13 rightmost bits for the SCREEN
              - 110 0000 0000 0000 for the KEYBOARD
    */
    /* If the leftmost bit of address is 0, we want RAM, so we negate it, and if load=1, then loadRam is 1. */
    Not (in=address[14], out=loadVar);
    Mux (a=false, b=loadVar, sel=load, out=loadRam);           
    
    /* If the leftmost bit of address is 1, we want the screen or keyboard, since it's already 1, we don't negate it. */
    Mux (a=false, b=address[14], sel=load, out=loadScreen);

    RAM16K (in=in, load=loadRam, address=address[0..13], out=RAMOut);
    Screen (in=in, load=loadScreen, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);

    /* If the 14th (leftmost) bit is 1, we want the screen or the keyboard, but if the 13th bit is also 1, we definitely want keyboard. */
    Mux16 (a=screenOut, b=keyboardOut, sel=address[13], out=IO);
    Mux16 (a=RAMOut, b=IO, sel=address[14], out=out);
}
