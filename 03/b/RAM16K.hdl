// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
    /* 4k -> 16k only requires 2 extra bits, so we use DMux4Way instead of 8. */
    DMux4Way (in=load, sel=address[12..13], a=Unit0, b= Unit1, c=Unit2, d=Unit3);

    RAM4K (in=in, load=Unit0, address=address[0..11], out=Unit0out);
    RAM4K (in=in, load=Unit1, address=address[0..11], out=Unit1out);
    RAM4K (in=in, load=Unit2, address=address[0..11], out=Unit2out);
    RAM4K (in=in, load=Unit3, address=address[0..11], out=Unit3out);

    Mux4Way16 (a=Unit0out, b= Unit1out, c=Unit2out, d=Unit3out, sel=address[12..13], out=out);
}
